#include<windows.h>
#include <GL/glut.h>
#include <stdlib.h>

int counter=0;
//double winHt=400.0;
float x=0,y=0,z=0;

float theta[5]={0};
int welcomeflag=0,slpFlag1=0,lidFlag1=0,onFlag=0,displayflag=0, lightFlag=1;
GLfloat angle1=90;
int ww, wh;

unsigned char welcome1[18]="     WELCOME     ";
unsigned char loading1[18]=" Loading . . . ";
unsigned char project[]="Project by";
unsigned char by[]="RACHANA &";
unsigned char vsn[]="PRAMIT";

GLfloat colRed[]={1,0,0};
GLfloat colGrey1[]={0.54,0.50,0.49};
GLfloat colGreyBlack[]={0.162,0.167,0.170};
GLfloat colSilver1[]={0.69,0.70,0.72};
GLfloat colSilver2[]={0.57,0.58,0.60};
GLfloat colGreen[]={0,1,0};
GLfloat colBlue[]={0,0,1};
GLfloat colBlack[]={0,0,0};

void resize(int width, int height)
{
    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    glOrtho(-300, 300, -300, 300, -350, 300.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(0.0,2.0,50.0,0,2,0,0.0,10.0,0.0);
}

void table()
{
    //floor
    glPushMatrix();
    glColor3f(1.0,1.0,1.0);
    glScaled(2.29,0.1,1.3);
    glTranslated(-0.05,-925,-135);
    glutSolidCube(200);
    glPopMatrix();

    glPushMatrix();//table base
    glColor3f(0.9,0.5,0.2);
    glScaled(0.7,0.1,1.1);
    glTranslated(0.1,370,-162.5);
    glutSolidCube(200);
    glPopMatrix();

    glPushMatrix();//table black
    glScaled(0.7,0.02,1.2);
    glTranslated(0.1,2450,-150.5);
    glColor3f(0.0,0.0,0.0);
    glutSolidCube(200);
    glPopMatrix();

    glPushMatrix();//table legs
    glScaled(0.3,2.21,0.45);
    glColor3f(0.9,0.5,0.16);
    glTranslated(205,-10,-183);
    glutSolidCube(60);
    glPopMatrix();

    glPushMatrix();
    glScaled(0.3,2.21,0.45);
    glColor3f(0.9,0.5,0.2);
    glTranslated(205,-10,-612);
    glutSolidCube(60);
    glPopMatrix();

    glPushMatrix();
    glColor3f(0.9,0.5,0.2);
    glScaled(0.3,2.21,0.45);
    glTranslated(-205,-10,-183);
    glutSolidCube(60);
    glPopMatrix();

    glPushMatrix();
    glColor3f(0.9,0.5,0.2);
    glScaled(0.3,2.21,0.45);
    glTranslated(-205,-10,-612);
    glutSolidCube(60);
    glPopMatrix();

    glPushMatrix();//chair seat1
    glColor3f(0.9,0.5,0.2);
    glScaled(0.6,0.1,0.8);
    glTranslated(170,-225,-180);
    glutSolidCube(70);
    glPopMatrix();

    glPushMatrix();
    glColor3f(0.9,0.5,0.2);
    glScaled(0.6,0.1,0.8);
    glTranslated(170,-225,-280);
    glutSolidCube(70);
    glPopMatrix();

    glPushMatrix();
    glColor3f(0.9,0.5,0.2);
    glScaled(0.6,0.1,0.8);
    glTranslated(-170,-225,-180);
    glutSolidCube(70);
    glPopMatrix();

    glPushMatrix();
    glColor3f(0.9,0.5,0.2);
    glScaled(0.6,0.1,0.8);
    glTranslated(-170,-225,-280);
    glutSolidCube(70);
    glPopMatrix();

    //chairlegs
    glPushMatrix();//1
    glColor3f(0.9,0.5,0.2);
    glScaled(0.6,0.1,0.8);
    glTranslated(2.9,24,-182);
    //glutSolidCube(50);
    glPopMatrix();

    glPushMatrix();//2
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(238,-12,-240);
    glutSolidCube(15);
    glPopMatrix();


    glPushMatrix();//3
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(238,-12,-335);
    glutSolidCube(15);
    glPopMatrix();

    glPushMatrix();//4
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(238,-12,-400);
    glutSolidCube(15);
    glPopMatrix();

    glPushMatrix();//4
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(238,-12,-496);
    glutSolidCube(15);
    glPopMatrix();


    glPushMatrix();//6
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(170,-12,-240);
    glutSolidCube(15);
    glPopMatrix();

    glPushMatrix();//7
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(170,-12,-335);
    glutSolidCube(15);
    glPopMatrix();

    glPushMatrix();//8
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(170,-12,-400);
    glutSolidCube(15);
    glPopMatrix();

    glPushMatrix();//6
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(169,-12,-496);
    glutSolidCube(15);
    glPopMatrix();

    glPushMatrix();//7
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(-169,-12,-240);
    glutSolidCube(15);
    glPopMatrix();

    glPushMatrix();//8
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(-169,-12,-335);
    glutSolidCube(15);
    glPopMatrix();


    glPushMatrix();//6
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(-169,-12,-400);
    glutSolidCube(15);
    glPopMatrix();

    glPushMatrix();//7
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(-169,-12,-496);
    glutSolidCube(15);
    glPopMatrix();

    glPushMatrix();//8
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(-238,-12,-240);
    glutSolidCube(15);
    glPopMatrix();


    glPushMatrix();//6
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(-238,-12,-335);
    glutSolidCube(15);
    glPopMatrix();

    glPushMatrix();//7
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(-238,-12,-400);
    glutSolidCube(15);
    glPopMatrix();

    glPushMatrix();//8
    glColor3f(0.9,0.5,0.2);
    glScaled(0.5,5.2,0.5);
    glTranslated(-238,-12,-496);
    glutSolidCube(15);
    glPopMatrix();

    //support chair
    glPushMatrix();
    glScaled(0.148,1.8,1.173);
    glTranslated(808,13.1,-122.5);
    glutSolidCube(47);
    glPopMatrix();

    glPushMatrix();
    glScaled(0.148,1.8,1.176);
    glTranslated(808,13.1,-190.5);
    glutSolidCube(47);
    glPopMatrix();

    glPushMatrix();
    glScaled(0.148,1.8,1.173);
    glTranslated(-804,13.1,-122.5);
    glutSolidCube(47);
    glPopMatrix();

    glPushMatrix();
    glScaled(0.148,1.8,1.176);
    glTranslated(-804,13.1,-190.5);
    glutSolidCube(47);
    glPopMatrix();

}

void lamp()
{
    glPushMatrix();
    glColor3f(1.0,1.0,0.0);
    glScaled(0.35,0.25,0.35);
    glTranslated(-9.7,16,3.7);
    glRotated(180,0,1,1);
    glutWireSphere(2,60,4);
    glPopMatrix();

    glPushMatrix();
    glColor3f(0.0,0.0,0.0);
    glTranslated(-3.4,3.15,1.3);
    glutSolidCube(0.8);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.0,1.0,0.0);
    glScaled(0.42,1.3,0.4);
    glTranslated(-8.1,3,3.2);
    glutSolidSphere(0.3,20,20);
    glPopMatrix();

    glPushMatrix();
    glColor3f(0.5,0.8,0.8);
    glTranslated(-3.1,3,1.7);
    glScaled(1.0,2,0.5);
    glutSolidCube(0.1);
    glPopMatrix();
}

void button1(GLfloat x,GLfloat y,GLfloat z,GLfloat a,GLfloat b,GLfloat c,GLfloat h)
{
    glColor3fv(colGreen);

	glBegin(GL_POLYGON);			      // B1
        glVertex3f(x+c,y+h,z-b+c);
        glVertex3f(x+a-c,y+h,z-b+c);
        glVertex3f(x+a-c,y+h,z-c);
        glVertex3f(x+c,y+h,z-c);
	glEnd();

    glColor3fv(colRed);

	glBegin(GL_POLYGON);				 // B2
        glVertex3f(x+a,y,z-b);
        glVertex3f(x+a,y,z);
        glVertex3f(x+a-c,y+h,z-c);
        glVertex3f(x+a-c,y+h,z-b+c);
	glEnd();

	glBegin(GL_POLYGON);				// B3
        glVertex3f(x,y,z-b);
        glVertex3f(x+a,y,z-b);
        glVertex3f(x+a-c,y+h,z-b+c);
        glVertex3f(x+c,y+h,z-b+c);
	glEnd();


	glBegin(GL_POLYGON);			// B4
        glVertex3f(x,y,z);
        glVertex3f(x,y,z-b);
        glVertex3f(x+c,y+h,z-b+c);
        glVertex3f(x+c,y+h,z-c);
	glEnd();


	glBegin(GL_POLYGON);			// B5
        glVertex3f(x+c,y+h,z-c);
        glVertex3f(x+a-c,y+h,z-c);
        glVertex3f(x+a,y,z);
        glVertex3f(x,y,z);
	glEnd();
}

void draw()
{
    glColor3fv(colRed);           // 1
	glBegin(GL_POLYGON);
	glVertex3f(20,40,25);
	glVertex3f(170,40,25);
	glVertex3f(170,40,-90);
	glVertex3f(20,40,-90);
	glEnd();

	glColor3fv(colGrey1);			  // 2
	glBegin(GL_POLYGON);
	glVertex3f(20,40,25);
	glVertex3f(170,40,25);
	glVertex3f(170,44,25);
	glVertex3f(20,44,25);
	glEnd();


	glColor3fv(colRed);			  // 3
	glBegin(GL_POLYGON);
	glVertex3f(20,44,25);
	glVertex3f(170,44,25);
	glVertex3f(170,47,25);
	glVertex3f(20,47,25);
	glEnd();


	glColor3fv(colGreyBlack);			// touch pad
	glBegin(GL_POLYGON);
	glVertex3f(75,50.1,10);
	glVertex3f(115,50.1,10);
	glVertex3f(115,50.1,-10);
	glVertex3f(75,50.1,-10);
	glEnd();

	button1(75,50.01,15,20,7,0.5,0.5);		// left button

	button1(95,50.01,15,20,7,0.5,0.5);		// right button
}

void pan1(GLfloat x,GLfloat y,GLfloat z,GLfloat a,GLfloat b,GLfloat c,GLfloat h)
{
	glColor3fv(colSilver1);

	glBegin(GL_POLYGON);			      // P1
	glVertex3f(x+c,y+h,z-b+c);
	glVertex3f(x+a-c,y+h,z-b+c);
	glVertex3f(x+a-c,y+h,z-c);
	glVertex3f(x+c,y+h,z-c);
	glEnd();

    glColor3fv(colSilver2);

	glBegin(GL_POLYGON);				 // P2
	glVertex3f(x+a,y,z-b);
	glVertex3f(x+a,y,z);
	glVertex3f(x+a-c,y+h,z-c);
	glVertex3f(x+a-c,y+h,z-b+c);
	glEnd();

	glBegin(GL_POLYGON);				// P3
	glVertex3f(x,y,z-b);
	glVertex3f(x+a,y,z-b);
	glVertex3f(x+a-c,y+h,z-b+c);
	glVertex3f(x+c,y+h,z-b+c);
	glEnd();


	glBegin(GL_POLYGON);			// P4
	glVertex3f(x,y,z);
	glVertex3f(x,y,z-b);
	glVertex3f(x+c,y+h,z-b+c);
	glVertex3f(x+c,y+h,z-c);
	glEnd();


	glBegin(GL_POLYGON);			// P5
	glVertex3f(x+c,y+h,z-c);
	glVertex3f(x+a-c,y+h,z-c);
	glVertex3f(x+a,y,z);
	glVertex3f(x,y,z);
	glEnd();
}

void textDisplay()
{
    int c;
	if(onFlag==1)
	{

		glPushMatrix();

		glTranslatef(20,50,-90);				// text translate
		glRotatef(-90+angle1,1,0,0);
		glTranslatef(-20,-50,90);				// text translate

		if(welcomeflag==0)							// 0
		{
			glColor3f(1,1,1);
			glScalef(.15,.15,.001);
			glTranslatef(-185,850,-90790);
			for(c=0;welcome1[c]!=0;++c)
				glutStrokeCharacter(GLUT_STROKE_ROMAN,welcome1[c]);
			glFlush();
			Sleep(200);


			glScalef(.8,.8,0);
			glTranslatef(-1670,-360,0);
			for(c=0;c<10;++c)
				glutStrokeCharacter(GLUT_STROKE_ROMAN,loading1[c]);
			glFlush();
			Sleep(200);

			for(c=10;c<12;++c)
				glutStrokeCharacter(GLUT_STROKE_ROMAN,loading1[c]);
			glFlush();
			Sleep(200);

			for(c=12;c<14;++c)
				glutStrokeCharacter(GLUT_STROKE_ROMAN,loading1[c]);
			glFlush();
			Sleep(200);

			for(c=14;c<19;++c)
				glutStrokeCharacter(GLUT_STROKE_ROMAN,loading1[c]);
			glFlush();
			Sleep(200);

			slpFlag1=0;
			welcomeflag=1;
		}

        else if(welcomeflag==1)					// 1
		{
			glColor3f(1,1,1);
			glScalef(.12,.12,.001);
			//glTranslatef(595,1130,-90790); for project  -130
			glTranslatef(465,1130,-90790);
			for(c=0;project[c]!=0;++c)
			{
				glutStrokeCharacter(GLUT_STROKE_ROMAN,project[c]);
				if(slpFlag1==0)
				{
					glFlush();
					Sleep(200);
				}
			}

			//glTranslatef(-300,-250,0); for project    -130
			glTranslatef(-750,-350,0);
			for(c=0;c<9;++c)
			{
				glutStrokeCharacter(GLUT_STROKE_ROMAN,by[c]);
				if(slpFlag1==0)
				{
					glFlush();
					Sleep(200);
				}
			}

			glScalef(0.9,0.9,0);
			glTranslatef(-689,-290,0);
			for(c=0;vsn[c]!=0;++c)
			{
				glutStrokeCharacter(GLUT_STROKE_ROMAN,vsn[c]);
				if(slpFlag1==0)
				{
					glFlush();
					Sleep(200);
				}
			}

			slpFlag1=1;
			glFlush();

		}


		glTranslatef(20,50,-90);				// text translate
		glRotatef(90+angle1,1,0,0);
		glTranslatef(-20,-50,90);				// text translate

		glPopMatrix();

		glutPostRedisplay();
	}
}

void draw_buttons()
{
	int i,k;

	button1(30,47,-66,7,7,0.7,1.5);

	for(i=12,k=1;k<=4;k++,i+=9)
		button1(30+i,47,-66,7,7,0.7,1.5);

	for(i=51,k=1;k<=4;k++,i+=9)
		button1(30+i,47,-66,7,7,0.7,1.5);

	for(i=90,k=1;k<=4;k++,i+=9)
		button1(30+i,47,-66,7,7,0.7,1.5);

	/////////////

	for(i=0,k=1;k<=13;k++,i+=9)
		button1(30+i,47,-55,7,7,0.7,1.5);

	button1(30+117,47,-55,13,7,0.7,1.5);    //  backspace key

	////////////////////

	button1(30,47,-55+9,12,7,0.7,1.5);

	for(i=14,k=1;k<=12;k++,i+=9)
		button1(30+i,47,-55+9,7,7,0.7,1.5);

	button1(30+122,47,-55+9,8,7,0.7,1.5);

	///////////////////////

	button1(30,47,-55+18,15,7,0.7,1.5);

	for(i=17,k=1;k<=11;k++,i+=9)
		button1(30+i,47,-55+18,7,7,0.7,1.5);

	button1(30+116,47,-55+18,14,7,0.7,1.5);

		///////////////////////

	button1(30,47,-55+27,19,7,0.7,1.5);

	for(i=21,k=1;k<=10;k++,i+=9)
		button1(30+i,47,-55+27,7,7,0.7,1.5);

	button1(30+111,47,-55+27,19,7,0.7,1.5);

		///////////////////////

	for(i=0,k=1;k<=3;k++,i+=13)
		button1(30+i,47,-55+36,11,7,0.7,1.5);

	button1(30+39,47,-55+36,45,7,0.7,1.5);

	for(i=86,k=1;k<=4;k++,i+=9)
		button1(30+i,47,-55+36,7,7,0.7,1.5);

	button1(30+122,47,-55+36,8,7,0.7,1.5);
}

void paneldraw()
{
	draw_buttons();

	pan1(20,47,25,150,40,2,3);     // down1

	pan1(20,47,25,7,115,2,3);		// left1

	pan1(20,47,-78,150,12,2,3);		// top1

	pan1(163,47,25,7,115,2,3);		// right1


	glColor3fv(colBlack);			// keyboard base
	glBegin(GL_POLYGON);
	glVertex3f(27,47,-15);
	glVertex3f(163,47,-15);
	glVertex3f(163,47,-83);
	glVertex3f(27,47,-83);
	glEnd();


	glColor3fv(colGrey1);						   // base side left
	glBegin(GL_POLYGON);
	glVertex3f(20,40,25);
	glVertex3f(20,40,-90);
	glVertex3f(20,47,-90);
	glVertex3f(20,47,25);
	glEnd();


	glColor3fv(colGrey1);						   // base side right
	glBegin(GL_POLYGON);
	glVertex3f(170,40,25);
	glVertex3f(170,40,-90);
	glVertex3f(170,47,-90);
	glVertex3f(170,47,25);
	glEnd();


	glColor3fv(colGrey1);						   // base back round 1
	glBegin(GL_QUAD_STRIP);

	glVertex3f(20,40,-90);
	glVertex3f(170,40,-90);

	glVertex3f(20,43,-95);
	glVertex3f(170,43,-95);

	glVertex3f(20,48,-96);
	glVertex3f(170,48,-96);

	glVertex3f(20,53,-95);
	glVertex3f(170,53,-95);

	glVertex3f(20,56,-92);
	glVertex3f(170,56,-92);

	if(lidFlag1==1)
	{
		glVertex3f(20,57,-90);
		glVertex3f(170,57,-90);
	}
	glEnd();



	glBegin(GL_TRIANGLE_FAN);				// left lid botton curve
	glVertex3f(20,47,-90);
	glVertex3f(20,40,-90);
	glVertex3f(20,43,-95);
	glVertex3f(20,48,-96);
	glVertex3f(20,53,-95);
	glVertex3f(20,56,-92);
	if(lidFlag1==1)
		glVertex3f(20,57,-90);
	glEnd();

    glBegin(GL_TRIANGLE_FAN);				// right lid botton curve
	glVertex3f(170,47,-90);
	glVertex3f(170,40,-90);
	glVertex3f(170,43,-95);
	glVertex3f(170,48,-96);
	glVertex3f(170,53,-95);
	glVertex3f(170,56,-92);
	if(lidFlag1==1)
		glVertex3f(170,57,-90);
	glEnd();
}

void display_lid()
{

	glTranslatef(20,50,-90);
	glRotatef(angle1,1,0,0);
	glTranslatef(-20,-50,90);

	glColor3fv(colGrey1);						   // 6
	glBegin(GL_POLYGON);
	glVertex3f(20,43,-90);
	glVertex3f(170,43,-90);
	glVertex3f(170,43,-205);
	glVertex3f(20,43,-205);
	glEnd();

	if(onFlag==1)
		glColor3fv(colBlue);						   // screen
	else
		glColor3fv(colBlack);
	glBegin(GL_POLYGON);
	glVertex3f(25,49,-95);
	glVertex3f(165,49,-95);
	glVertex3f(165,49,-200);
	glVertex3f(25,49,-200);
	glEnd();


	pan1(20,49,-90,150,7,1,1);			// lid panel down

	pan1(163,49,-90,7,115,1,1);			// lid panel right

	pan1(20,49,-198,150,7,1,1);			// lid panel up

	pan1(20,49,-90,7,115,1,1);			// lid panel left


	glColor3fv(colGrey1);						   // lid side left
	glBegin(GL_POLYGON);
	glVertex3f(20,43,-90);
	glVertex3f(20,49,-90);
	glVertex3f(20,49,-205);
	glVertex3f(20,43,-205);
	glEnd();

	glColor3fv(colGrey1);						   // lid side right
	glBegin(GL_POLYGON);
	glVertex3f(170,43,-90);
	glVertex3f(170,49,-90);
	glVertex3f(170,49,-205);
	glVertex3f(170,43,-205);
	glEnd();


	glColor3fv(colGrey1);						   // lid side top
	glBegin(GL_POLYGON);
	glVertex3f(20,43,-205);
	glVertex3f(20,49,-205);
	glVertex3f(170,49,-205);
	glVertex3f(170,43,-205);
	glEnd();


	glTranslatef(20,50,-90);
	glRotatef(-angle1,1,0,0);
	glTranslatef(-20,-50,90);

	textDisplay();
}


void laptopDraw()
{
    draw();
    paneldraw();
    display_lid();
}


void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

/*glOrtho(-winHt*64/48.0,winHt*64/48.0,-winHt,winHt,0.1,100.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
*/

  glRotatef(theta[0], 1.0, 0.0, 0.0);
	glRotatef(theta[1], 1.0, 0.0, 0.0);
	glRotatef(theta[2], 0.0, 1.0, 0.0);
	glRotatef(theta[3], 0.0, 1.0, 0.0);


    glPushMatrix();
    glScalef(50,50,50);
    glTranslatef(0,-1,-1);
    glPushMatrix();
    glColor3f(1,1,1);
    glScaled(9.5,6.5,0.25);
    glTranslated(0.0,0.3,0.0);
    glutSolidCube(1);
    glPopMatrix();

    glPushMatrix();
    glColor3f(0,0,0);
    glScaled(9.5,0.2,0.3);
    glTranslated(0.0,-7.05,0.0);
    glutSolidCube(1);
    glPopMatrix();


    glPushMatrix();
    glColor3f(0,0,0);
    glScaled(9.5,0.2,0.3);
    glTranslated(0.0,26,0.0);
    glutSolidCube(1);
    glPopMatrix();


    glPushMatrix();
    glColor3f(1,0,0);
    glScaled(2.5,0.15,2.5);
    glTranslated(0,8,0.5);
    glutSolidCube(1);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1,0,0);
    glScaled(2.5,0.15,2.5);
    glTranslated(-1.4,18,0.5);
    glutSolidCube(1);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1,0,0);
    glScaled(2.5,0.15,2.5);
    glTranslated(1.4,-0.6,0.5);
    glutSolidCube(1);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.8,1.5,0.0);
    glTranslated(3.5,0.36,1.4);
    glutSolidTeapot(0.5);
    glPopMatrix();

    glPushMatrix();
    lamp();
    glPopMatrix();

    glPopMatrix();

    glPushMatrix();
    glTranslatef(-100,-27,90);
    laptopDraw();
    glPopMatrix();

    glEnable(GL_LIGHT1);
    glEnable(GL_LIGHTING);

    glPushMatrix();

    table();
    glPopMatrix();


    glFlush();
    glutSwapBuffers();
}

/*static void mouse(int btn,int status,int x,int y)
{
    if(btn==GLUT_LEFT_BUTTON)winHt=winHt+100;
    if(btn==GLUT_RIGHT_BUTTON)winHt=winHt-100;
    glutPostRedisplay();
}*/

void key1(unsigned char key, int x, int y)
{
    if(key=='w')
    {
    /* theta[0] += 0.5;
	if( theta[0] > 45.0 ) theta[0] -= 45.0;
	glutPostRedisplay();
    */
        glRotatef(10, 1.0, 0.0, 0.0);
        glutPostRedisplay();
    }
    else
    if(key=='s')
    {
        glRotatef(-10, 1.0, 0.0, 0.0);
        glutPostRedisplay();
    }
    else
    if(key=='a')
    {
        glRotatef(-10, 0.0, 1.0, 0.0);
        glutPostRedisplay();
    }
    else
    if(key=='d')
    {
        glRotatef(10, 0.0, 1.0, 0.0);
        glutPostRedisplay();
    }
    else
    if(key=='l')
    {
        if(lightFlag == 1){
            glDisable(GL_LIGHT0);
            lightFlag = 0;
            glutPostRedisplay();
        }
        else{
            glEnable(GL_LIGHT0);
            lightFlag = 1;
            glutPostRedisplay();
        }
    }
    else if(key == 'x')
    {
        angle1-=5;
        if(angle1<=80) angle1=80;
        if(angle1<=130) lidFlag1=0;
        glutPostRedisplay();
    }
    else if(key == 'y')
    {
        angle1+=5;
        if(angle1>=180) angle1=180;
        if(angle1>=130) lidFlag1=1;
        glutPostRedisplay();
    }
    else if(key == 'o')
    {
        if(onFlag == 0){
            onFlag = 1;
            welcomeflag = 0;
            glutPostRedisplay();
        }
        else{
            onFlag = 0;
            glutPostRedisplay();
        }
    }
}

void output1(int x, int y, char *string)
{
  int len, i;

  glRasterPos2f(x, y);
  len = strlen(string);
  for (i = 0; i < len; i++)
  {
	  glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, string[i]);
  }
}


void resize0(GLsizei w,GLsizei h)
{
	glViewport(0,0,w,h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(-200, 400, -300, 300);
	glMatrixMode(GL_MODELVIEW);
	ww = w;
	wh = h;
}

void key0(unsigned char key, int x, int y){
    if(key == 13){
        glutKeyboardFunc(key1);
        glutDisplayFunc(display);
        glutReshapeFunc(resize);
        glutPostRedisplay();
        resize(ww,wh);
    }
}

void screen0()
{
    glDisable(GL_LIGHTING);
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	glPushMatrix();
	glColor3f(0.5,0.2,1);
	output1(60,270,"WELCOME");
	glPopMatrix();

	 glColor3f(0.5,0.2,1);

      output1(-200, 220, "  PROJECT NAME: ");
      output1(-200, 180, "  PROJECT BY:") ;

	  glColor3f(1,1,1);
	  output1(-5,220,"3D ROOM SCENE");
	  output1(-5,180,"RACHANA K.");
      output1(-5,140,"PRAMIT PAUL");
	  glPushMatrix();
      glColor3f(0.5,0.2,1);
      output1(-200,80,"  KEYS    	     FUNCTIONS");
	  glColor3f(1,1,1);
	  output1(-190,50,"  W              Rotate in positive x axis");
	  output1(-190,20,"  D               Rotate in positive y axis");
	  output1(-190,-10,"  S                Rotate in negative x axis");
	  output1(-190,-40,"  A               Rotate in negative y axis");
	  output1(-190,-70,"  L                Lights on/off");
	  output1(-190,-100,"  X               Open Laptop Lid");
	  output1(-190,-130,"  Y               Close Laptop Lid");
      output1(-190,-160,"  O               Laptop Screen ON/OFF");

	  glColor3f(1,0,0);
	  output1(40,-230,"Press Enter to Continue");
	  glPopMatrix();


      glutSwapBuffers();
      glFlush();
      glEnable(GL_LIGHTING);
}


void init()
{
    glClearColor(0,0.7,1.0,0);
    glEnable(GL_DEPTH_TEST);
}

    const GLfloat light_ambient[]  = { 0.0f, 0.0f, 0.0f, 1.0f };
    const GLfloat light_diffuse[]  = { 1.0f, 1.0f, 1.0f, 1.0f };
    const GLfloat light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
    const GLfloat light_position[] = { 2.0f, 5.0f, 5.0f, 0.0f };

    const GLfloat mat_ambient[]    = { 0.7f, 0.7f, 0.7f, 1.0f };
    const GLfloat mat_diffuse[]    = { 0.8f, 0.8f, 0.8f, 1.0f };
    const GLfloat mat_specular[]   = { 1.0f, 1.0f, 1.0f, 1.0f };
    const GLfloat high_shininess[] = { 50.0f };



int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(640,480);
    glutInitWindowPosition(10,10);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE| GLUT_DEPTH);

    glutCreateWindow("3D ROOM SCENE");
    glEnable(GL_LIGHT0);
    glEnable(GL_LIGHT1);
    glEnable(GL_NORMALIZE);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_LIGHTING);
    glutReshapeFunc(resize0);
    glutDisplayFunc(screen0);
    glutKeyboardFunc(key0);
    //glutMouseFunc(mouse);
    init();
    glutMainLoop();
    glLightfv(GL_LIGHT0, GL_AMBIENT,  light_ambient);
    glLightfv(GL_LIGHT0, GL_DIFFUSE,  light_diffuse);
    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);

    glLightfv(GL_LIGHT1, GL_AMBIENT,  light_ambient);
    glLightfv(GL_LIGHT1, GL_DIFFUSE,  light_diffuse);
    glLightfv(GL_LIGHT1, GL_SPECULAR, light_specular);
    glLightfv(GL_LIGHT1, GL_POSITION, light_position);

    glMaterialfv(GL_FRONT , GL_AMBIENT,  mat_ambient);
     //glMaterialfv(GL_BACK , GL_AMBIENT,  mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE,   mat_diffuse);
    glMaterialfv(GL_FRONT   , GL_SPECULAR,  mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
 return EXIT_SUCCESS;

}
