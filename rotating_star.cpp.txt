/*
*   ROTATING STARS
*
*
*/
#include<stdio.h>
#include <windows.h>
#include<stdlib.h>
#include<math.h>
//#include<times.h>
#include<GL/glut.h>
#define INNER_RADIUS 0.11
//#define INNER_REDIUS 1.1
//#define OUTER_RADIUS 1.3
#define OUTER_RADIUS 1.0
#define NUM_STAR_POINTS 8
#define NUM_STARS 8
#define ROT_INC 0.8
#define STAR_IDX 8
#define M_PI 22/7
static GLfloat g_rotate=0;
int scene;
static GLfloat g_rotateInc=ROT_INC;
// Step size in x and y directions
// (number of pixels to move each time)
GLfloat xstep = 1.0f;
GLfloat ystep = 1.0f;
GLsizei rsize = 50;
 int al=1;
// Keep track of windows changing width and height
GLfloat windowWidth;
GLfloat windowHeight;
int flag=0;
int a=0;


void Draw_Stars(GLfloat inner,GLfloat outer,int numpoints)
{
	GLfloat step=M_PI*2.0/(GLfloat)(2*numpoints);
	register int i;
	GLfloat angle,r;
	glBegin(GL_POLYGON);
	for(i=0;i<numpoints*2;++i)
	{
		r=(i%2==0?inner:outer);
		angle=i*step;
		glVertex2f(r*cos(angle),r*sin(angle));
	}
	glEnd();
}
void Background1(void)
{


		glColor3f(1.0,1.5,1.0);
		glBegin(GL_POLYGON);
		glVertex2f(-800,-800);
		glVertex2f(-800,800);
		glVertex2f(800,800);
		glVertex2f(800,-800);
		glEnd();
		glFlush();
	}
void Background2(void)
	{	if(al!=0)
{
		glColor3f(1.0,0.5,1.5);
		glBegin(GL_POLYGON);
		glVertex2f(-800,-800);
		glVertex2f(-800,800);
		glVertex2f(800,800);
		glVertex2f(800,-800);
		glEnd();
		glFlush();
		glutSwapBuffers();
}	}


void Display(void)
{
	register int i;
	register GLfloat c;
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glClear(GL_COLOR_BUFFER_BIT);

switch(scene)
{
  case 1:

	for(i=0;i<NUM_STARS;++i)
	{
		glPushMatrix();
		glRotatef((360.0/NUM_STARS*i),0,0,1);
		glTranslatef(OUTER_RADIUS,0,0);
		if(a==1)
			glRotatef(g_rotate+(3*i),0,1,1);
		else
			glRotatef(g_rotate-(3*i),1,0,1);
		c=1.0/NUM_STARS*(GLfloat)i;
		glColor3f(1.0-c,0.0,c);
		glCallList(STAR_IDX);
		glPopMatrix();

	}
	break;

}
	glFlush();
	glutSwapBuffers();
}
void myReshape(int w,int h)
{
	glViewport(0,0,w,h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if(w<=h)
		glOrtho(-2.0,2.0,-2.0*(GLfloat)h/(GLfloat)w,2.0*(GLfloat)h/(GLfloat)w,-2.0,2.0);
	else
		glOrtho(-2.0*(GLfloat)w/(GLfloat)h,2.0*(GLfloat)w/(GLfloat)h,-2.0,2.0,-2.0,2.0);
	glMatrixMode(GL_MODELVIEW);
}


void menu(int value){
	switch(value){
		case 1:Display();

				break;

		case 2: glutIdleFunc(NULL);
				break;
		case 3: exit(0);
				break;
	}
}
void myKey(unsigned char k,int x ,int y)
{
	switch(k){
		case'm':
			{
				a=1;
				glClear(GL_COLOR_BUFFER_BIT);
				//Background2();
				glFlush();

			break;
			}
		case's':
			{
				glClearColor(1.0,1.0,1.0,0);
				glClear(GL_COLOR_BUFFER_BIT);
				glMatrixMode(GL_MODELVIEW);
				glLoadIdentity();

				glFlush();
				break;
			}
	//	case 'b':
//			 TimerFunction(1);
		//	break;
		case'r':
			{
				a=0;
			Background1();

			break;
			}
		case'q':
		case'Q': exit(0);
			break;
        case 'n':
            scene=scene+1;
            break;
		default:
			printf("unknown printable command\'%c\'.\n",k);
				break;


	}
}



void myMouse(int btn,int state,int x,int y)
{
	if(btn==GLUT_LEFT_BUTTON&&state==GLUT_DOWN)g_rotateInc=ROT_INC;
	if(btn==GLUT_MIDDLE_BUTTON&&state==GLUT_DOWN)g_rotateInc=ROT_INC;
	if(btn==GLUT_RIGHT_BUTTON&&state==GLUT_DOWN)g_rotateInc=ROT_INC;
	//glutSwapBuffers();
	//glutPostRedisplay();
}
void myIdleFunc(void)
{
	if(a==0)
	{
		g_rotate-=g_rotateInc;
		glutSwapBuffers();
		glutPostRedisplay();
	}
	else{
		g_rotate+=g_rotateInc;
		glutSwapBuffers();
		glutPostRedisplay();
	}

}
int main(int argc,char **argv)
{
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB);
	glutInitWindowSize(800,800);
	glutInitWindowPosition(0,0);
	glutCreateWindow("Star Instance Test");

	glutCreateMenu(menu);
	glutAddMenuEntry("start",1);
	glutAddMenuEntry("stop",2);
	glutAddMenuEntry("quit",3);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	glutReshapeFunc(myReshape);
	glutDisplayFunc(Display);

	glutIdleFunc(myIdleFunc);
	glutKeyboardFunc(myKey);

//	glutTimerFunc(33, TimerFunction, 1);

	glutMouseFunc(myMouse);
	glNewList(STAR_IDX,GL_COMPILE);
	Draw_Stars(INNER_RADIUS,OUTER_RADIUS,NUM_STAR_POINTS);
	glEndList();
	glutMainLoop();
	//return 0;
}

